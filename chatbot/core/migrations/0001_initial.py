# Generated by Django 3.1.6 on 2021-03-02 20:13

import chatterbot.conversation
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Chatbot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('telegram_status', models.BooleanField(default=False)),
                ('telegram_key', models.CharField(max_length=255, null=True)),
                ('dataset', models.JSONField(default=list)),
                ('ner_model', models.BinaryField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Statement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
                ('search_text', models.CharField(blank=True, max_length=255)),
                ('conversation', models.CharField(max_length=32)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time that the statement was created at.')),
                ('in_response_to', models.CharField(max_length=255, null=True)),
                ('search_in_response_to', models.CharField(blank=True, max_length=255)),
                ('persona', models.CharField(max_length=50)),
                ('chatbot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statements', to='core.chatbot')),
                ('tags', models.ManyToManyField(related_name='statements', to='core.Tag')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, chatterbot.conversation.StatementMixin),
        ),
    ]
